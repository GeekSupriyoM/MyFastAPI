name: 'Terraform'

on:
  #push:
    #branches: [ "main" ]
  #pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: Terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
     # with:
     #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
     
    - name: Replace placeholders with secrets
      run: |
        sed -i 's/clientid/${{ secrets.AZURE_CLIENT_ID }}/g' provider.tf backend.tf
        sed -i 's/clientsecret/${{ secrets.AZURE_CLIENT_SECRET }}/g' provider.tf backend.tf
        sed -i 's/subscriptionid/${{ secrets.AZURE_SUBSCRIPTION_ID }}/g' provider.tf backend.tf
        sed -i 's/tenantid/${{ secrets.AZURE_TENANT_ID }}/g' provider.tf backend.tf
        echo 'Branch ref ::' ${{ github.ref }} ':' ${{ github.event_name }} ':' ${{ github.actor }} ':' ${{ github.repository }} ':'

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # This is a convenient way to destroy all remote objects managed by a particular Terraform configuration
    #- name: Terraform Destroy
    #  run: terraform apply -destroy -auto-approve -input=false
    
    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan #-out tfplan.out

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve #-input=false tfplan.out
